from Crypto.Util.number import isPrime, inverse, long_to_bytes
from math import gcd

n=2739699434633097765008468371124644741923408864896396205946954196101304653772173210372608955799251139999322976228678445908704975780068946332615022064030241384638601426716056067126300711933438732265846838735860353259574129074615298010047322960704972157930663061480726566962254887144927753449042590678730779046154516549667611603792754880414526688217305247008627664864637891883902537649625488225238118503996674292057904635593729208703096877231276911845233833770015093213639131244386867600956112884383105437861665666273910566732634878464610789895607273567372933766243229798663389032807187003756226177111720510187664096691560511459141773632683383938152396711991246874813205614169161561906148974478519987935950318569760474249427787310865749167740917232799538099494710964837536211535351200520324575676987080484141561336505103872809932354748531675934527453231255132361489570816639925234935907741385330442961877410196615649696508210921
e=65537
c=2082926013138674164997791605512226759362824531322433048281306983526001801581956788909408046338065370689701410862433705395338736589120086871506362760060657440410056869674907314204346790554619655855805666327905912762300412323371126871463045993946331927129882715778396764969311565407104426500284824495461252591576672989633930916837016411523983491364869137945678029616541477271287052575817523864089061675401543733151180624855361245733039022140321494471318934716652758163593956711915212195328671373739342124211743835858897895276513396783328942978903764790088495033176253777832808572717335076829539988337505582696026111326821783912902713222712310343791755341823415393931813610365987465739339849380173805882522026704474308541271732478035913770922189429089852921985416202844838873352090355685075965831663443962706473737852392107876993485163981653038588544562512597409585410384189546449890975409183661424334789750460016306977673969147

def find_next(n):
    n+=(2 if n%2 else 1)
    while not isPrime(n):
        n+=2
    return n
# p q r are close together, in fact, they are close in an order of 10^5, so if we calculate the cube root, we almost have the primes, we only need to check if it is a factor, a little bruteforce

def root3rd(x):
    y, y1 = None, 2
    while y!=y1:
        y = y1
        y3 = y**3
        d = (2*y3+x)
        y1 = (y*(y3+2*x)+d//2)//d
    return y

root = root3rd(n)
print("cube root",root)
# going a little back under p
root = root - 600000

def calculate_prime_divisor(p,mod):
    while True:
        p=find_next(p)
        if gcd(p,mod) != 1:
            return p
# the first divisor we encounter wil be p, and then q, and then r
p = calculate_prime_divisor(root,n)
print("Found P :",p)
q = calculate_prime_divisor(p, n//p)
print("Found q :",q)
r = (n//p)//q
print("Found r :",r)
phi = (p-1)*(r-1)*(q-1)

d = inverse(e,phi)

m=pow(c, d, n)

print(long_to_bytes(m))


